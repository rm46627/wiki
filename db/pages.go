package db

import (
	"database/sql"
	"fmt"

	// database driver
	_ "github.com/go-sql-driver/mysql"
)

// Page stores data for subpages
type Page struct {
	ID    int64
	URL   string
	Title string
	Body  []byte
}

// Frontpage stores slice of strings of pages titles
type Frontpage struct {
	URLs   []string
	Titles []string
}

// Database contains mysql database variable
var Database *sql.DB

// Initialize connect to the database
func Initialize() error {
	var err error
	Database, err = sql.Open("mysql", "root:roma@tcp(127.0.0.1:3306)/wiki") // TO DO PASSWORD TO DATABASE AS ARGUMENT
	if err != nil {
		return fmt.Errorf("error during opening database: %v", err)
	}

	err = Database.Ping()
	if err != nil {
		return fmt.Errorf("error during verifying connection to the database: %v", err)
	}
	fmt.Println("DB connected!")

	return nil
}

// Close closes the database
func Close() {
	Database.Close()
}

// InsertPage make insert query to store data of page in db
func InsertPage(p *Page) (int64, error) {
	result, err := Database.Exec("INSERT INTO pages (url, title, body) VALUES (?, ?, ?)", p.URL, p.Title, p.Body)
	if err != nil {
		return -1, fmt.Errorf("saving page %s to db: %v", p.Title, err)
	}
	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("getting id generated by the database: %v", err)
	}
	return id, err
}

// UpdatePage make update query to edit existing page in database
func UpdatePage(p *Page) error {
	_, err := Database.Exec("UPDATE pages SET body = ? WHERE url = ?", p.Body, p.URL)
	if err != nil {
		return fmt.Errorf("updating page %s to db: %v", p.URL, err)
	}
	return nil
}

// GetPages make query for titles of last created 10 pages
func GetPages() (*Frontpage, error) {
	rows, err := Database.Query("SELECT url, title FROM pages ORDER BY pageId DESC LIMIT 10")
	if err != nil {
		return nil, fmt.Errorf("")
	}
	defer rows.Close()

	var urls []string
	var titles []string
	var u string
	var t string
	for rows.Next() {
		if err := rows.Scan(&u, &t); err != nil {
			return nil, fmt.Errorf("error during scan each row: %v", err)
		}
		urls = append(urls, u)
		titles = append(titles, t)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("error from the overall query: %v", err)
	}

	return &Frontpage{URLs: urls, Titles: titles}, nil
}

// PageByURL make query for a single row from pages
func PageByURL(url string) (*Page, error) {
	var p Page
	row := Database.QueryRow("SELECT * FROM pages WHERE url = ?", url)
	if err := row.Scan(&p.ID, &p.URL, &p.Title, &p.Body); err != nil {
		return &p, fmt.Errorf("page url:%s scan error: %v", url, err)
	}
	return &p, nil
}

// DeletePage make query for deleting page by given title.
func DeletePage(url string) error {
	_, err := Database.Exec("DELETE FROM pages WHERE url = ?", url)
	if err != nil {
		return fmt.Errorf("deleting page %s to db: %v", url, err)
	}
	return nil
}
